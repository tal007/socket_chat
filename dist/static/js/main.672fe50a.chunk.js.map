{"version":3,"sources":["App.js","action/index.js","reducer/index.js","serviceWorker.js","index.js"],"names":["socket","io","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","login","username","refs","input","value","trim","userList","state","users","length","k","message","info","uid","get_uid","emit","setState","showLogin","_","concat","Date","getTime","Math","floor","random","send","id","data","setTimeout","messages","scrollBy","userCount","messageList","_this2","on","_this3","_this$state","react_default","a","createElement","className","placeholder","allowClear","ref","onPressEnter","es_button","onClick","entries","map","v","key","avatar","style","color","backgroundColor","substring","Component","USERS","combineReducers","arguments","undefined","action","type","Boolean","window","location","hostname","match","store","createStore","reducer","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.672fe50a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport io from 'socket.io-client'\nimport { Input, Button, Avatar, message } from 'antd'\n\nconst socket = io('http://localhost:2000/');\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      showLogin: true,\n      users: {\n        userCount: 0,\n        userList: {}\n      },\n      messageList: []\n    }\n  }\n  \n  login = () => {\n    const username = this.refs.input.input.value.trim()\n    const { userList } = this.state.users\n    \n    if( username.length ){\n      for (const k in userList) {\n        if( userList[k] === username ){\n          message.info(\"聊天室已经有这个用户了，请重新起一个名字\")\n          return\n        }\n      }\n      \n      this.uid = this.get_uid()\n      socket.emit(\"login\", {\n        username,\n        uid: this.uid\n      })\n\n      this.setState({\n        showLogin: false\n      })\n    } else {\n      message.info(\"请输入一个用户名！！\")\n    }\n  }\n\n  get_uid = _ => {\n    return `${new Date().getTime()}${Math.floor(Math.random() * 89999)}`\n  }\n\n  send = _ => {\n    this.message = this.refs.message.input.value\n    if (this.message.trim().length === 0) {\n      message.info(\"你还啥子都还没有输入就行发送了嘛\")\n      return\n    }\n    const id = `${new Date().getTime()}${Math.floor(Math.random() * 9999)}`\n    const data = {\n      message: this.message.trim(),\n      uid: this.uid,\n      id\n    }\n    socket.emit('message', data)\n\n    // ant design 中清空输入的内容\n    this.refs.message.state.value = ''\n    setTimeout(_ => this.refs.messages.scrollBy(0, 999999), 100)\n  }\n\n  componentDidMount(){\n    socket.on(\"users\", data => {\n      this.setState({users: data})\n    })\n\n    socket.on(\"receive_message\", data => {\n      this.setState({messageList: data})\n    })\n  }\n  \n  render(){\n    const { showLogin, users, messageList } = this.state\n    const { userCount, userList } = users\n    \n    if (showLogin) {\n      return (\n        <div className=\"App\">\n          <Input placeholder=\"输入一个名字撒\" allowClear ref='input' onPressEnter={this.login}/>\n          <Button onClick={this.login} className=\"login\">登录</Button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"room\">\n          <div className='inner'>\n            <header>欢迎来到踏浪聊天室，当前聊天室共{userCount}人</header>\n            <div className=\"content\">\n              <ul className=\"user-list\">\n                {\n                  Object.entries(userList).map(v => {\n                    return <li\n                      className=\"user-list-item\"\n                      key={v[0]}\n                    >\n                      <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>\n                        {v[1].substring(0, 2)}\n                      </Avatar>\n                      {v[1]}\n                    </li>\n                  })\n                }\n              </ul>\n              \n              <ul className=\"message-list\" ref=\"messages\">\n                {\n                  messageList.map(v => <li\n                    key={v.message.id}\n                    className={v.message.uid === this.uid ? \"message-list-item me\" : \"message-list-item\"}\n                  >\n                    {v.message.uid === this.uid && <span className=\"message-content\">{v.message.message}</span>}\n                    <Avatar style={{ color: '#f56a00', backgroundColor: '#fde3cf' }}>\n                      {v.username && v.username.substring(0, 2)}\n                    </Avatar>\n                    {v.message.uid !== this.uid && <span className=\"message-content\">{v.message.message}</span>}\n                  </li>)\n                }\n              </ul>\n            </div>\n            <footer>\n              <Input\n                placeholder=\"请输入消息\"\n                ref='message'\n                onPressEnter={this.send}\n              />\n              <Button className=\"send\" onClick={this.send}>发送</Button>\n            </footer>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App\n","export const USERS = \"USERS\"\n\nexport function updataUsers(data){\n  return {\n    type: USERS,\n    data\n  }\n}","import { combineReducers } from 'redux'\n\nimport {\n  USERS\n} from '../action'\n\nconst users = (state = {\n  userCount: 0,\n  userList: []\n}, action) => {\n  switch (action.type) {\n    case USERS:\n      return action.data\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({\n  users\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'antd/dist/antd.min.css'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducer from './reducer'\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer)\n\nReactDOM.render( <Provider store={store}>\n  <App/>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}